name: Deploy to EC2 with tmux

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_KEY }}

    - name: Deploy to EC2 using tmux
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@52.78.212.96 << 'EOF'
          cd ~/blackcows-server
          git pull
          
          # Python 캐시 파일 삭제
          find . -type f -name "*.pyc" -delete
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

          # 환경변수 파일 생성
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" > .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
          echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> .env
          echo "ENVIRONMENT=production" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> .env
          echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> .env
          echo "FIREBASE_PRIVATE_KEY=\"${{ secrets.FIREBASE_PRIVATE_KEY }}\"" >> .env

          # .env 파일 권한 설정
          chmod 600 .env

          # 가상환경 업데이트
          if [ ! -d "venv" ]; then
            echo "=== 가상환경 생성 ==="
            python3 -m venv venv
          fi
      
          # 가상환경 활성화
          source venv/bin/activate
      
          # 패키지 업데이트
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install email-validator

          # Python 구문 검사
          echo "=== Python 구문 검사 ==="
          python3 -m py_compile main.py

          # import 문제 자동 수정
          echo "=== import 문제 자동 수정 ==="
          if grep -q "routes.livestock_trace" main.py; then
            sed -i '/routes\.livestock_trace/d' main.py
            sed -i '/livestock_router/d' main.py
            echo "✅ 문제 있는 import 제거 완료"
          fi

          # tmux 세션 확인 및 서버 재시작
          echo "=== tmux 세션 관리 ==="
          
          # 기존 blackcows-session이 있는지 확인
          if tmux has-session -t blackcows-session 2>/dev/null; then
            echo "✅ 기존 blackcows-session 발견 - 서버 재시작"
            
            # 기존 세션에서 서버 종료
            tmux send-keys -t blackcows-session C-c
            sleep 3
            
            # 새 서버 시작 명령 전송
            tmux send-keys -t blackcows-session "cd ~/blackcows-server" Enter
            tmux send-keys -t blackcows-session "source venv/bin/activate" Enter
            tmux send-keys -t blackcows-session "uvicorn main:app --host 0.0.0.0 --port 8000 --reload" Enter
            
            echo "✅ 기존 tmux 세션에서 서버 재시작 완료"
            
          else
            echo "⚠️ blackcows-session 없음 - 새로 생성"
            
            # 새 tmux 세션 생성 및 서버 시작
            tmux new-session -d -s blackcows-session -c ~/blackcows-server
            tmux send-keys -t blackcows-session "source venv/bin/activate" Enter
            tmux send-keys -t blackcows-session "uvicorn main:app --host 0.0.0.0 --port 8000 --reload" Enter
            
            echo "✅ 새 tmux 세션 생성 및 서버 시작 완료"
          fi

          # 서버 시작 대기
          echo "=== 서버 시작 대기 (10초) ==="
          sleep 10

          # tmux 세션 상태 확인
          echo "=== tmux 세션 상태 확인 ==="
          if tmux has-session -t blackcows-session 2>/dev/null; then
            echo "✅ blackcows-session 실행 중"
            
            # 세션 내용 확인
            echo "=== tmux 세션 최근 로그 확인(15줄) ==="
            tmux capture-pane -t blackcows-session -p | tail -15
            echo "로그 확인 시간: $(date)"
            
            # 에러가 있는지 별도 확인
            echo "=== 에러 로그 확인 ==="
            ERROR_COUNT=$(tmux capture-pane -t blackcows-session -p | grep -i error | wc -l)
            if [ $ERROR_COUNT -gt 0 ]; then
              echo "⚠️ 에러 발견 ($ERROR_COUNT개):"
              tmux capture-pane -t blackcows-session -p | grep -i error | tail -3
            else
              echo "✅ 에러 없음"
            fi
          else
            echo "❌ blackcows-session 실행되지 않음"
            exit 1
          fi

          # 포트 상태 확인
          echo "=== 포트 8000 상태 확인 ==="
          PORT_CHECK_SUCCESS=false
          
          # ss 명령어로 확인
          if ss -tlnp | grep ':8000'; then
            echo "✅ 포트 8000 사용 중 (ss 확인)"
            PORT_CHECK_SUCCESS=true
          fi
          
          # lsof로도 확인
          if command -v lsof >/dev/null 2>&1; then
            if lsof -i:8000 >/dev/null 2>&1; then
              echo "✅ 포트 8000 사용 중 (lsof 확인)"
              PORT_CHECK_SUCCESS=true
            fi
          fi
          
          # Python 프로세스로도 확인
          if ps aux | grep uvicorn | grep -v grep | grep 8000; then
            echo "✅ uvicorn 프로세스 실행 중"
            PORT_CHECK_SUCCESS=true
          fi

          # 헬스체크 
          echo "=== 헬스체크 ==="
          sleep 5
          
          HEALTH_CHECK_SUCCESS=false
          ROOT_CHECK_SUCCESS=false
          
          # /health 엔드포인트 확인
          if curl -f -m 10 http://localhost:8000/health >/dev/null 2>&1; then
            echo "✅ /health 엔드포인트 응답 성공"
            HEALTH_CHECK_SUCCESS=true
          fi
          
          # 루트 경로 확인
          if curl -f -m 10 http://localhost:8000/ >/dev/null 2>&1; then
            echo "✅ 루트 경로 응답 성공"
            ROOT_CHECK_SUCCESS=true
          fi

          # 최종 결과 판정 (조건 완화)
          if [ "$HEALTH_CHECK_SUCCESS" = true ] || [ "$ROOT_CHECK_SUCCESS" = true ] || [ "$PORT_CHECK_SUCCESS" = true ]; then
            echo "🎉 서버가 정상적으로 시작되었습니다!"
            echo "🎯 서버 접속: http://52.78.212.96:8000"
            echo "📚 API 문서: http://52.78.212.96:8000/docs"
            echo "🖥️ tmux 세션 접속: tmux attach-session -t blackcows-session"
            
            # 최종 상태 요약
            echo ""
            echo "=== 배포 상태 요약 ==="
            echo "✅ Git 업데이트 완료"
            echo "✅ 환경 변수 설정 완료"
            echo "✅ tmux 세션 관리 완료"
            if [ "$HEALTH_CHECK_SUCCESS" = true ]; then
              echo "✅ 헬스체크 통과"
            fi
            if [ "$ROOT_CHECK_SUCCESS" = true ]; then
              echo "✅ 루트 경로 응답 정상"
            fi
            if [ "$PORT_CHECK_SUCCESS" = true ]; then
              echo "✅ 포트 8000 정상 사용"
            fi
            echo "🚀 배포 성공!"
            
          else
            echo "❌ 서버 시작 실패 - 상세 로그 확인"
            echo "=== tmux 세션 전체 로그 ==="
            tmux capture-pane -t blackcows-session -p
            echo "=== Python 프로세스 확인 ==="
            ps aux | grep python
            exit 1
          fi

        EOF
