name: Deploy to EC2 with tmux

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_KEY }}

    - name: Deploy to EC2 using tmux
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@52.78.212.96 << 'EOF'
          echo "=== 기존 tmux 세션 확인 ==="
          
          # tmux session 0이 있는지 확인하고 연결
          if tmux has-session -t 0 2>/dev/null; then
            echo "✅ tmux session 0 발견 - 기존 프로세스 종료"
            # 기존 실행 중인 프로세스 종료 (Ctrl+C)
            tmux send-keys -t 0 C-c
            sleep 3
            
            # 추가로 uvicorn 프로세스가 남아있다면 강제 종료
            pkill -f uvicorn || true
            sleep 2
            
          else
            echo "⚠️ tmux session 0 없음 - 새로 생성"
            tmux new-session -d -s 0
          fi

          echo "=== 프로젝트 폴더로 이동 및 Git 업데이트 ==="
          # blackcows-server 폴더로 이동
          tmux send-keys -t 0 "cd ~/blackcows-server" Enter
          sleep 1
          
          # Git pull 실행
          tmux send-keys -t 0 "git pull origin main" Enter
          sleep 3
          
          echo "=== Python 캐시 파일 삭제 ==="
          # Python 캐시 파일 삭제
          find ~/blackcows-server -type f -name "*.pyc" -delete 2>/dev/null || true
          find ~/blackcows-server -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

          echo "=== Firebase 서비스 계정 키 파일 확인 ==="
          cd ~/blackcows-server
          
          # Firebase 서비스 계정 키 파일이 존재하는지 확인
          if [ -f "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" ]; then
            echo "✅ Firebase 키 파일 존재: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
          else
            echo "❌ Firebase 키 파일 없음: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}"
            echo "파일을 확인하거나 올바른 경로를 설정하세요."
            exit 1
          fi

          echo "=== 환경변수 파일 생성 ==="
          # 환경변수 파일 생성
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" > .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
          echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> .env
          echo "ENVIRONMENT=production" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> .env
          echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> .env
          echo "FIREBASE_PRIVATE_KEY=\"${{ secrets.FIREBASE_PRIVATE_KEY }}\"" >> .env
          echo "GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" >> .env
          echo "LIVESTOCK_TRACE_API_DECODING_KEY=${{ secrets.LIVESTOCK_TRACE_API_DECODING_KEY }}" >> .env
          echo "MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}" >> .env
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> .env
          echo "MAIL_FROM=${{ secrets.MAIL_FROM }}" >> .env
          echo "MAIL_SERVER=email-smtp.ap-northeast-2.amazonaws.com" >> .env
          echo "MAIL_PORT=587" >> .env
          echo "MAIL_TLS=True" >> .env
          echo "MAIL_SSL=False" >> .env

          # .env 파일 권한 설정
          chmod 600 .env

          echo "=== 가상환경 설정 ==="
          # 가상환경 생성 (없을 경우에만)
          if [ ! -d "venv" ]; then
            echo "가상환경 생성 중..."
            python3 -m venv venv
          fi
      
          # tmux 세션에서 가상환경 활성화
          tmux send-keys -t 0 "source venv/bin/activate" Enter
          sleep 2
      
          echo "=== 패키지 업데이트 ==="
          # tmux 세션에서 패키지 업데이트
          tmux send-keys -t 0 "pip install --upgrade pip" Enter
          sleep 3
          tmux send-keys -t 0 "pip install -r requirements.txt" Enter
          sleep 8

          echo "=== 새로운 파일 구조 확인 ==="
          if [ -f "schemas/livestock_cow.py" ]; then
            echo "✅ 축산물이력제 스키마 파일 존재"
          else
            echo "⚠️ 축산물이력제 스키마 파일 없음 - 기능이 제한될 수 있습니다"
          fi
          
          if [ -f "services/livestock_cow_service.py" ]; then
            echo "✅ 축산물이력제 서비스 파일 존재"
          else
            echo "⚠️ 축산물이력제 서비스 파일 없음 - 기능이 제한될 수 있습니다"
          fi

          echo "=== Python 구문 검사 ==="
          python3 -m py_compile main.py
          
          if [ -f "schemas/livestock_cow.py" ]; then
            python3 -m py_compile schemas/livestock_cow.py
            echo "livestock_cow.py 구문 검사 통과"
          fi
          
          if [ -f "services/livestock_cow_service.py" ]; then
            python3 -m py_compile services/livestock_cow_service.py
            echo "livestock_cow_service.py 구문 검사 통과"
          fi

          echo "=== 축산물이력제 API 설정 확인 ==="
          # 축산물이력제 API 키 설정 확인
          if [ -n "${{ secrets.LIVESTOCK_TRACE_API_DECODING_KEY }}" ]; then
            echo "✅ 축산물이력제 API 키 설정됨"
          else
            echo "⚠️ 축산물이력제 API 키 미설정 - 연동 기능이 제한됩니다"
            echo "   수동 젖소 등록은 정상 작동합니다"
          fi

          echo "=== 서버 시작 ==="
          # tmux 세션에서 환경변수 설정 후 서버 시작
          tmux send-keys -t 0 "export GOOGLE_APPLICATION_CREDENTIALS=${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" Enter
          sleep 1
          # 축산물이력제 API 키도 환경변수로 설정
          tmux send-keys -t 0 "export LIVESTOCK_TRACE_API_DECODING_KEY=${{ secrets.LIVESTOCK_TRACE_API_DECODING_KEY }}" Enter
          sleep 1
          tmux send-keys -t 0 "uvicorn main:app --host 0.0.0.0 --port 8000 --reload --log-level info --access-log" Enter
          
          echo "=== 서버 시작 대기 (15초) ==="
          sleep 15

          echo "=== tmux 세션 상태 확인 ==="
          if tmux has-session -t 0 2>/dev/null; then
            echo "✅ tmux session 0 실행 중"
            
            # 세션 내용 확인
            echo "=== tmux 세션 최근 로그 확인(20줄) ==="
            tmux capture-pane -t 0 -p | tail -20
            echo "로그 확인 시간: $(date)"
            
            # 에러가 있는지 별도 확인
            echo "=== 에러 로그 확인 ==="
            ERROR_COUNT=$(tmux capture-pane -t 0 -p | grep -i error | wc -l)
            if [ $ERROR_COUNT -gt 0 ]; then
              echo "⚠️ 에러 발견 ($ERROR_COUNT개):"
              tmux capture-pane -t 0 -p | grep -i error | tail -5
            else
              echo "✅ 에러 없음"
            fi
          else
            echo "❌ tmux session 0 실행되지 않음"
            exit 1
          fi

          echo "=== 포트 상태 확인 ==="
          PORT_CHECK_SUCCESS=false
          
          # ss 명령어로 확인
          if ss -tlnp | grep ':8000'; then
            echo "✅ 포트 8000 사용 중 (ss 확인)"
            PORT_CHECK_SUCCESS=true
          fi
          
          # lsof로도 확인
          if command -v lsof >/dev/null 2>&1; then
            if lsof -i:8000 >/dev/null 2>&1; then
              echo "✅ 포트 8000 사용 중 (lsof 확인)"
              PORT_CHECK_SUCCESS=true
            fi
          fi
          
          # Python 프로세스로도 확인
          if ps aux | grep uvicorn | grep -v grep | grep 8000; then
            echo "✅ uvicorn 프로세스 실행 중"
            PORT_CHECK_SUCCESS=true
          fi

          echo "=== 헬스체크 ==="
          sleep 5
          
          HEALTH_CHECK_SUCCESS=false
          ROOT_CHECK_SUCCESS=false
          LIVESTOCK_TRACE_CHECK=false
          
          # /health 엔드포인트 확인
          if curl -f -m 10 http://localhost:8000/health >/dev/null 2>&1; then
            echo "✅ /health 엔드포인트 응답 성공"
            HEALTH_CHECK_SUCCESS=true
          fi
          
          # 루트 경로 확인
          if curl -f -m 10 http://localhost:8000/ >/dev/null 2>&1; then
            echo "✅ 루트 경로 응답 성공"
            ROOT_CHECK_SUCCESS=true
          fi

          # 최종 결과 판정
          if [ "$HEALTH_CHECK_SUCCESS" = true ] || [ "$ROOT_CHECK_SUCCESS" = true ] || [ "$PORT_CHECK_SUCCESS" = true ]; then
            echo ""
            echo "🎉 서버가 정상적으로 시작되었습니다!"
            echo "🎯 서버 접속: http://52.78.212.96:8000"
            echo "📚 API 문서: http://52.78.212.96:8000/docs"
            echo "🖥️ tmux 세션 접속: tmux attach-session -t 0"
            echo ""
            echo "=== 배포 상태 요약 ==="
            echo "✅ Git 업데이트 완료 (git pull origin main)"
            echo "✅ 환경 변수 설정 완료"
            echo "✅ Firebase 설정 완료"
            echo "✅ tmux session 0 에서 서버 실행 중"
            echo "✅ 패키지 업데이트 완료"
            if [ "$HEALTH_CHECK_SUCCESS" = true ]; then
              echo "✅ 헬스체크 통과"
            fi
            if [ "$ROOT_CHECK_SUCCESS" = true ]; then
              echo "✅ 루트 경로 응답 정상"
            fi
            if [ "$PORT_CHECK_SUCCESS" = true ]; then
              echo "✅ 포트 8000 정상 사용"
            fi
            # 축산물이력제 기능 상태 표시
            if [ "$LIVESTOCK_TRACE_CHECK" = true ]; then
              echo "✅ 축산물이력제 연동 기능 정상"
            else
              echo "⚠️ 축산물이력제 연동 기능 제한됨 (수동 등록은 가능)"
            fi
            echo ""
            echo "🚀 배포 성공!"
            echo "💡 서버 로그 확인: tmux attach-session -t 0"
            echo "💡 tmux 세션 나가기: Ctrl+B → D"
            
            echo ""
            echo "API 테스트:"
            echo "curl http://52.78.212.96:8000/health"
            
          else
            echo "❌ 서버 시작 실패 - 상세 로그 확인"
            echo "=== tmux 세션 전체 로그 ==="
            tmux capture-pane -t 0 -p
            echo "=== Python 프로세스 확인 ==="
            ps aux | grep python
            exit 1
          fi

        EOF
