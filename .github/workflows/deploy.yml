name: Deploy to EC2

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_KEY }}

    - name: Deploy to EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@52.78.212.96 << 'EOF'
          cd ~/blackcows-server
          git pull
          
          # Python 캐시 파일 삭제
          find . -type f -name "*.pyc" -delete
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true

          # 환경변수 파일 생성
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" > .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> .env
          echo "REFRESH_TOKEN_EXPIRE_DAYS=7" >> .env
          echo "FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" >> .env
          echo "FIREBASE_PRIVATE_KEY_ID=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}" >> .env
          echo "FIREBASE_CLIENT_EMAIL=${{ secrets.FIREBASE_CLIENT_EMAIL }}" >> .env
          echo "FIREBASE_CLIENT_ID=${{ secrets.FIREBASE_CLIENT_ID }}" >> .env
          echo "FIREBASE_PRIVATE_KEY=\"${{ secrets.FIREBASE_PRIVATE_KEY }}\"" >> .env

          # .env 파일 권한 설정
          chmod 600 .env

          # 기존 가상환경 삭제 후 새로 생성
          rm -rf venv
          python3 -m venv venv
      
          # 가상환경 활성화
          source venv/bin/activate
      
          # 패키지 설치
          pip install --upgrade pip
          pip install -r requirements.txt
          
          # email-validator 추가 설치 (pydantic[email] 대신)
          echo "=== email-validator 설치 ==="
          pip install email-validator
          echo "✅ email-validator 설치 완료"
          
          # 서버 실행 전 기존 프로세스 종료
          fuser -k 8000/tcp || true
          pkill -f uvicorn || true
          
          # Python 구문 테스트
          echo "=== Python 구문 검사 ==="
          python3 -m py_compile main.py
          if [ $? -eq 0 ]; then
            echo "✅ main.py 구문 검사 통과"
          else
            echo "❌ main.py 구문 오류 발견"
            exit 1
          fi
           
          # main.py 내용 확인
          echo "=== main.py 내용 확인 ==="
          head -20 main.py
          echo "=== main.py 엔드포인트 확인 ==="
          if grep -q "/health" main.py; then
            echo "✅ /health 엔드포인트 발견"
          else
            echo "❌ /health 엔드포인트 없음 - 추가 필요"
          fi

          # import 문제 자동 수정
          echo "=== import 문제 자동 수정 ==="
          if grep -q "routes.livestock_trace" main.py; then
            echo "❌ 문제가 되는 routes.livestock_trace import 발견 - 자동 제거 중..."
            sed -i '/routes\.livestock_trace/d' main.py
            echo "✅ routes.livestock_trace import 제거 완료"
          else
            echo "✅ routes.livestock_trace import 없음"
          fi
          
          # livestock_router 사용 부분도 제거
          if grep -q "livestock_router" main.py; then
            echo "❌ livestock_router 사용 발견 - 자동 제거 중..."
            sed -i '/livestock_router/d' main.py
            echo "✅ livestock_router 사용 제거 완료"
          else
            echo "✅ livestock_router 사용 없음"
          fi
          
          # 수정된 main.py 확인
          echo "=== 수정된 main.py 확인 ==="
          head -10 main.py
          
          # import os 확인
          echo "=== import os 확인 ==="
          if grep -q "import os" main.py; then
            echo "✅ import os 발견"
          else
            echo "❌ import os 누락 - main.py 첫 줄에 추가 필요"
            exit 1
          fi

          # 패키지 설치 확인
          echo "=== 패키지 설치 확인 ==="
          python3 -c "import email_validator; print('✅ email-validator 설치 확인')" || echo "❌ email-validator 누락"
          python3 -c "import pydantic; print('✅ pydantic 설치 확인')" || echo "❌ pydantic 누락"
          python3 -c "import fastapi; print('✅ fastapi 설치 확인')" || echo "❌ fastapi 누락"

          # 환경변수 테스트 (한 줄로 수정)
          echo "=== 환경변수 확인 ==="
          python3 -c "import os; from dotenv import load_dotenv; load_dotenv(); print('✅ JWT_SECRET_KEY:', 'SET' if os.getenv('JWT_SECRET_KEY') else '❌ NOT SET'); print('✅ FIREBASE_PROJECT_ID:', 'SET' if os.getenv('FIREBASE_PROJECT_ID') else '❌ NOT SET'); print('✅ FIREBASE_PRIVATE_KEY:', 'SET' if os.getenv('FIREBASE_PRIVATE_KEY') else '❌ NOT SET'); print('✅ All environment variables loaded successfully!')"

          # Firebase 연결 테스트 (간단화)
          echo "=== Firebase 연결 테스트 ==="
          python3 -c "from config.firebase_config import initialize_firebase; initialize_firebase(); print('✅ Firebase 초기화 성공')" || echo "❌ Firebase 테스트 건너뜀"

          # 서버 실행
          echo "=== 서버 시작 ==="
          nohup uvicorn main:app --host 0.0.0.0 --port 8000 > server.log 2>&1 < /dev/null &
          SERVER_PID=$!
          echo "서버 PID: $SERVER_PID"

          # 서버 시작 대기 (더 오래 기다리기)
          echo "=== 서버 시작 대기 (10초) ==="
          sleep 10

          # 프로세스 상태 확인
          echo "=== 프로세스 상태 확인 ==="
          if ps -p $SERVER_PID > /dev/null; then
            echo "✅ 서버 프로세스 실행 중 (PID: $SERVER_PID)"
          else
            echo "❌ 서버 프로세스가 종료됨"
            echo "=== 서버 로그 확인 ==="
            cat server.log
            echo "=== 프로세스 목록 확인 ==="
            ps aux | grep uvicorn
            exit 1
          fi

          # 서버 로그 확인 (실시간)
          echo "=== 최근 서버 로그 (마지막 10줄) ==="
          tail -10 server.log

          # 포트 확인 (더 자세히)
          echo "=== 포트 상태 확인 ==="
          echo "ss 명령어로 포트 확인:"
          ss -tlnp | grep 8000 || echo "ss로 포트 8000 확인 안됨"
          
          echo "lsof 명령어로 포트 확인:"
          lsof -i:8000 2>/dev/null || echo "lsof로 포트 8000 확인 안됨"
          
          echo "netstat 명령어로 포트 확인:"
          netstat -tlnp | grep 8000 || echo "netstat으로 포트 8000 확인 안됨"

          # 더 오래 기다린 후 헬스체크
          echo "=== 추가 대기 후 헬스체크 (5초 더) ==="
          sleep 5

          # 헬스체크 시도 (여러 방법으로)
          echo "=== 헬스체크 시도 ==="
          
          # 방법 1: /health 엔드포인트
          if curl -f -m 10 http://localhost:8000/health > /dev/null 2>&1; then
            echo "✅ /health 엔드포인트 응답 성공"
            HEALTH_CHECK_SUCCESS=true
          else
            echo "❌ /health 엔드포인트 응답 실패"
            HEALTH_CHECK_SUCCESS=false
          fi
          
          # 방법 2: 루트 경로
          if curl -f -m 10 http://localhost:8000/ > /dev/null 2>&1; then
            echo "✅ 루트 경로 응답 성공"
            ROOT_CHECK_SUCCESS=true
          else
            echo "❌ 루트 경로 응답 실패"
            ROOT_CHECK_SUCCESS=false
          fi

          # 최종 결과 판정
          if [ "$HEALTH_CHECK_SUCCESS" = true ] || [ "$ROOT_CHECK_SUCCESS" = true ]; then
            echo "🎉 서버가 정상적으로 시작되었습니다!"
            echo "🎯 서버 접속: http://52.78.212.96:8000"
            echo "📚 API 문서: http://52.78.212.96:8000/docs"
          else
            echo "❌ 서버 시작 실패 - 상세 로그 확인"
            echo "=== 전체 서버 로그 ==="
            cat server.log
            echo "=== Python 프로세스 확인 ==="
            ps aux | grep python
            echo "=== 포트 사용 현황 ==="
            sudo netstat -tlnp | grep 8000 || echo "포트 8000 사용 없음"
            exit 1
          fi

        EOF
